<?php
/**
 * ContentApi
 * PHP version 5
 *
 * @category Class
 * @package  Thip
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ThiemeMeulenhoff Content API
 *
 * Concept of an API to get the content from the publication service.
 *
 * OpenAPI spec version: 0.8.5
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Thip\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Thip\ApiException;
use Thip\Configuration;
use Thip\HeaderSelector;
use Thip\ObjectSerializer;

/**
 * ContentApi Class Doc Comment
 *
 * @category Class
 * @package  Thip
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ContentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation publicationServiceApplicationControllerCourseApiControllerContent
     *
     * Get content of a publication. The content can be queried at any level. With a flag you can ask to include the children (content tree). With a flag you can chose to include the content itself (if you have rights to do so).
     *
     * @param  string $course The StreamCode of the course to find the content in (see /api/v1/course) (required)
     * @param  bool $include_children include all child DigitalResources (optional, default to false)
     * @param  bool $include_content include the content of each DigitalResource (optional, default to false)
     * @param  bool $content_as_html include the content of each DigitalResource as HTML (automatically enabled includeContent) (optional, default to false)
     * @param  string $content_identifier Unique content identifier for specific element (optional)
     * @param  \DateTime $version find content before specified date/time (optional)
     * @param  bool $include_versions find all different versions of a specific content element (optional, default to false)
     * @param  bool $preview show preview version instead of the published version (optional, default to false)
     *
     * @throws \Thip\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Thip\Model\DigitalResource[]
     */
    public function publicationServiceApplicationControllerCourseApiControllerContent($course, $include_children = false, $include_content = false, $content_as_html = false, $content_identifier = null, $version = null, $include_versions = false, $preview = false)
    {
        list($response) = $this->publicationServiceApplicationControllerCourseApiControllerContentWithHttpInfo($course, $include_children, $include_content, $content_as_html, $content_identifier, $version, $include_versions, $preview);
        return $response;
    }

    /**
     * Operation publicationServiceApplicationControllerCourseApiControllerContentWithHttpInfo
     *
     * Get content of a publication. The content can be queried at any level. With a flag you can ask to include the children (content tree). With a flag you can chose to include the content itself (if you have rights to do so).
     *
     * @param  string $course The StreamCode of the course to find the content in (see /api/v1/course) (required)
     * @param  bool $include_children include all child DigitalResources (optional, default to false)
     * @param  bool $include_content include the content of each DigitalResource (optional, default to false)
     * @param  bool $content_as_html include the content of each DigitalResource as HTML (automatically enabled includeContent) (optional, default to false)
     * @param  string $content_identifier Unique content identifier for specific element (optional)
     * @param  \DateTime $version find content before specified date/time (optional)
     * @param  bool $include_versions find all different versions of a specific content element (optional, default to false)
     * @param  bool $preview show preview version instead of the published version (optional, default to false)
     *
     * @throws \Thip\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Thip\Model\DigitalResource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function publicationServiceApplicationControllerCourseApiControllerContentWithHttpInfo($course, $include_children = false, $include_content = false, $content_as_html = false, $content_identifier = null, $version = null, $include_versions = false, $preview = false)
    {
        $request = $this->publicationServiceApplicationControllerCourseApiControllerContentRequest($course, $include_children, $include_content, $content_as_html, $content_identifier, $version, $include_versions, $preview);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Thip\Model\DigitalResource[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Thip\Model\DigitalResource[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Thip\Model\DigitalResource[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Thip\Model\DigitalResource[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation publicationServiceApplicationControllerCourseApiControllerContentAsync
     *
     * Get content of a publication. The content can be queried at any level. With a flag you can ask to include the children (content tree). With a flag you can chose to include the content itself (if you have rights to do so).
     *
     * @param  string $course The StreamCode of the course to find the content in (see /api/v1/course) (required)
     * @param  bool $include_children include all child DigitalResources (optional, default to false)
     * @param  bool $include_content include the content of each DigitalResource (optional, default to false)
     * @param  bool $content_as_html include the content of each DigitalResource as HTML (automatically enabled includeContent) (optional, default to false)
     * @param  string $content_identifier Unique content identifier for specific element (optional)
     * @param  \DateTime $version find content before specified date/time (optional)
     * @param  bool $include_versions find all different versions of a specific content element (optional, default to false)
     * @param  bool $preview show preview version instead of the published version (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicationServiceApplicationControllerCourseApiControllerContentAsync($course, $include_children = false, $include_content = false, $content_as_html = false, $content_identifier = null, $version = null, $include_versions = false, $preview = false)
    {
        return $this->publicationServiceApplicationControllerCourseApiControllerContentAsyncWithHttpInfo($course, $include_children, $include_content, $content_as_html, $content_identifier, $version, $include_versions, $preview)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation publicationServiceApplicationControllerCourseApiControllerContentAsyncWithHttpInfo
     *
     * Get content of a publication. The content can be queried at any level. With a flag you can ask to include the children (content tree). With a flag you can chose to include the content itself (if you have rights to do so).
     *
     * @param  string $course The StreamCode of the course to find the content in (see /api/v1/course) (required)
     * @param  bool $include_children include all child DigitalResources (optional, default to false)
     * @param  bool $include_content include the content of each DigitalResource (optional, default to false)
     * @param  bool $content_as_html include the content of each DigitalResource as HTML (automatically enabled includeContent) (optional, default to false)
     * @param  string $content_identifier Unique content identifier for specific element (optional)
     * @param  \DateTime $version find content before specified date/time (optional)
     * @param  bool $include_versions find all different versions of a specific content element (optional, default to false)
     * @param  bool $preview show preview version instead of the published version (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicationServiceApplicationControllerCourseApiControllerContentAsyncWithHttpInfo($course, $include_children = false, $include_content = false, $content_as_html = false, $content_identifier = null, $version = null, $include_versions = false, $preview = false)
    {
        $returnType = '\Thip\Model\DigitalResource[]';
        $request = $this->publicationServiceApplicationControllerCourseApiControllerContentRequest($course, $include_children, $include_content, $content_as_html, $content_identifier, $version, $include_versions, $preview);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'publicationServiceApplicationControllerCourseApiControllerContent'
     *
     * @param  string $course The StreamCode of the course to find the content in (see /api/v1/course) (required)
     * @param  bool $include_children include all child DigitalResources (optional, default to false)
     * @param  bool $include_content include the content of each DigitalResource (optional, default to false)
     * @param  bool $content_as_html include the content of each DigitalResource as HTML (automatically enabled includeContent) (optional, default to false)
     * @param  string $content_identifier Unique content identifier for specific element (optional)
     * @param  \DateTime $version find content before specified date/time (optional)
     * @param  bool $include_versions find all different versions of a specific content element (optional, default to false)
     * @param  bool $preview show preview version instead of the published version (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function publicationServiceApplicationControllerCourseApiControllerContentRequest($course, $include_children = false, $include_content = false, $content_as_html = false, $content_identifier = null, $version = null, $include_versions = false, $preview = false)
    {
        // verify the required parameter 'course' is set
        if ($course === null || (is_array($course) && count($course) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $course when calling publicationServiceApplicationControllerCourseApiControllerContent'
            );
        }

        $resourcePath = '/api/v1/content/course/{course}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_children !== null) {
            $queryParams['includeChildren'] = ObjectSerializer::toQueryValue($include_children);
        }
        // query params
        if ($include_content !== null) {
            $queryParams['includeContent'] = ObjectSerializer::toQueryValue($include_content);
        }
        // query params
        if ($content_as_html !== null) {
            $queryParams['contentAsHtml'] = ObjectSerializer::toQueryValue($content_as_html);
        }
        // query params
        if ($content_identifier !== null) {
            $queryParams['contentIdentifier'] = ObjectSerializer::toQueryValue($content_identifier);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($include_versions !== null) {
            $queryParams['includeVersions'] = ObjectSerializer::toQueryValue($include_versions);
        }
        // query params
        if ($preview !== null) {
            $queryParams['preview'] = ObjectSerializer::toQueryValue($preview);
        }

        // path params
        if ($course !== null) {
            $resourcePath = str_replace(
                '{' . 'course' . '}',
                ObjectSerializer::toPathValue($course),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation publicationServiceApplicationControllerCourseApiControllerFilter
     *
     * Get specific content from a publication, filtered with several optional filters. Choose at least one filter, otherwise this api does nothing.
     *
     * @param  string $course The StreamCode of the course to find the content in (see /api/v1/course) (required)
     * @param  bool $preview show preview version instead of the published version (optional, default to false)
     * @param  bool $include_content include the content of each DigitalResource (optional, default to false)
     * @param  bool $content_as_html include the content of each DigitalResource as HTML (automatically enabled includeContent) (optional, default to false)
     * @param  string[] $filter_type Filter on type, ex. question, chapter or paragraph (optional)
     * @param  string[] $filter_typical_learning_time Filter on typical learning time, ex. PT1M (optional)
     * @param  string[] $filter_learning_goal Filter on the learning goal, ex. Engels (optional)
     * @param  string[] $filter_working_process Filter on the lam cell, workingProcess axis (optional)
     * @param  string[] $filter_learning_process Filter on the lan cell, learningProcess axis (optional)
     * @param  string[] $filter_learning_level Filter on the learning level, ex. VO-Onderbouw + K (optional)
     *
     * @throws \Thip\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Thip\Model\DigitalResource[]
     */
    public function publicationServiceApplicationControllerCourseApiControllerFilter($course, $preview = false, $include_content = false, $content_as_html = false, $filter_type = null, $filter_typical_learning_time = null, $filter_learning_goal = null, $filter_working_process = null, $filter_learning_process = null, $filter_learning_level = null)
    {
        list($response) = $this->publicationServiceApplicationControllerCourseApiControllerFilterWithHttpInfo($course, $preview, $include_content, $content_as_html, $filter_type, $filter_typical_learning_time, $filter_learning_goal, $filter_working_process, $filter_learning_process, $filter_learning_level);
        return $response;
    }

    /**
     * Operation publicationServiceApplicationControllerCourseApiControllerFilterWithHttpInfo
     *
     * Get specific content from a publication, filtered with several optional filters. Choose at least one filter, otherwise this api does nothing.
     *
     * @param  string $course The StreamCode of the course to find the content in (see /api/v1/course) (required)
     * @param  bool $preview show preview version instead of the published version (optional, default to false)
     * @param  bool $include_content include the content of each DigitalResource (optional, default to false)
     * @param  bool $content_as_html include the content of each DigitalResource as HTML (automatically enabled includeContent) (optional, default to false)
     * @param  string[] $filter_type Filter on type, ex. question, chapter or paragraph (optional)
     * @param  string[] $filter_typical_learning_time Filter on typical learning time, ex. PT1M (optional)
     * @param  string[] $filter_learning_goal Filter on the learning goal, ex. Engels (optional)
     * @param  string[] $filter_working_process Filter on the lam cell, workingProcess axis (optional)
     * @param  string[] $filter_learning_process Filter on the lan cell, learningProcess axis (optional)
     * @param  string[] $filter_learning_level Filter on the learning level, ex. VO-Onderbouw + K (optional)
     *
     * @throws \Thip\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Thip\Model\DigitalResource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function publicationServiceApplicationControllerCourseApiControllerFilterWithHttpInfo($course, $preview = false, $include_content = false, $content_as_html = false, $filter_type = null, $filter_typical_learning_time = null, $filter_learning_goal = null, $filter_working_process = null, $filter_learning_process = null, $filter_learning_level = null)
    {
        $request = $this->publicationServiceApplicationControllerCourseApiControllerFilterRequest($course, $preview, $include_content, $content_as_html, $filter_type, $filter_typical_learning_time, $filter_learning_goal, $filter_working_process, $filter_learning_process, $filter_learning_level);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Thip\Model\DigitalResource[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Thip\Model\DigitalResource[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Thip\Model\DigitalResource[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Thip\Model\DigitalResource[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation publicationServiceApplicationControllerCourseApiControllerFilterAsync
     *
     * Get specific content from a publication, filtered with several optional filters. Choose at least one filter, otherwise this api does nothing.
     *
     * @param  string $course The StreamCode of the course to find the content in (see /api/v1/course) (required)
     * @param  bool $preview show preview version instead of the published version (optional, default to false)
     * @param  bool $include_content include the content of each DigitalResource (optional, default to false)
     * @param  bool $content_as_html include the content of each DigitalResource as HTML (automatically enabled includeContent) (optional, default to false)
     * @param  string[] $filter_type Filter on type, ex. question, chapter or paragraph (optional)
     * @param  string[] $filter_typical_learning_time Filter on typical learning time, ex. PT1M (optional)
     * @param  string[] $filter_learning_goal Filter on the learning goal, ex. Engels (optional)
     * @param  string[] $filter_working_process Filter on the lam cell, workingProcess axis (optional)
     * @param  string[] $filter_learning_process Filter on the lan cell, learningProcess axis (optional)
     * @param  string[] $filter_learning_level Filter on the learning level, ex. VO-Onderbouw + K (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicationServiceApplicationControllerCourseApiControllerFilterAsync($course, $preview = false, $include_content = false, $content_as_html = false, $filter_type = null, $filter_typical_learning_time = null, $filter_learning_goal = null, $filter_working_process = null, $filter_learning_process = null, $filter_learning_level = null)
    {
        return $this->publicationServiceApplicationControllerCourseApiControllerFilterAsyncWithHttpInfo($course, $preview, $include_content, $content_as_html, $filter_type, $filter_typical_learning_time, $filter_learning_goal, $filter_working_process, $filter_learning_process, $filter_learning_level)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation publicationServiceApplicationControllerCourseApiControllerFilterAsyncWithHttpInfo
     *
     * Get specific content from a publication, filtered with several optional filters. Choose at least one filter, otherwise this api does nothing.
     *
     * @param  string $course The StreamCode of the course to find the content in (see /api/v1/course) (required)
     * @param  bool $preview show preview version instead of the published version (optional, default to false)
     * @param  bool $include_content include the content of each DigitalResource (optional, default to false)
     * @param  bool $content_as_html include the content of each DigitalResource as HTML (automatically enabled includeContent) (optional, default to false)
     * @param  string[] $filter_type Filter on type, ex. question, chapter or paragraph (optional)
     * @param  string[] $filter_typical_learning_time Filter on typical learning time, ex. PT1M (optional)
     * @param  string[] $filter_learning_goal Filter on the learning goal, ex. Engels (optional)
     * @param  string[] $filter_working_process Filter on the lam cell, workingProcess axis (optional)
     * @param  string[] $filter_learning_process Filter on the lan cell, learningProcess axis (optional)
     * @param  string[] $filter_learning_level Filter on the learning level, ex. VO-Onderbouw + K (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicationServiceApplicationControllerCourseApiControllerFilterAsyncWithHttpInfo($course, $preview = false, $include_content = false, $content_as_html = false, $filter_type = null, $filter_typical_learning_time = null, $filter_learning_goal = null, $filter_working_process = null, $filter_learning_process = null, $filter_learning_level = null)
    {
        $returnType = '\Thip\Model\DigitalResource[]';
        $request = $this->publicationServiceApplicationControllerCourseApiControllerFilterRequest($course, $preview, $include_content, $content_as_html, $filter_type, $filter_typical_learning_time, $filter_learning_goal, $filter_working_process, $filter_learning_process, $filter_learning_level);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'publicationServiceApplicationControllerCourseApiControllerFilter'
     *
     * @param  string $course The StreamCode of the course to find the content in (see /api/v1/course) (required)
     * @param  bool $preview show preview version instead of the published version (optional, default to false)
     * @param  bool $include_content include the content of each DigitalResource (optional, default to false)
     * @param  bool $content_as_html include the content of each DigitalResource as HTML (automatically enabled includeContent) (optional, default to false)
     * @param  string[] $filter_type Filter on type, ex. question, chapter or paragraph (optional)
     * @param  string[] $filter_typical_learning_time Filter on typical learning time, ex. PT1M (optional)
     * @param  string[] $filter_learning_goal Filter on the learning goal, ex. Engels (optional)
     * @param  string[] $filter_working_process Filter on the lam cell, workingProcess axis (optional)
     * @param  string[] $filter_learning_process Filter on the lan cell, learningProcess axis (optional)
     * @param  string[] $filter_learning_level Filter on the learning level, ex. VO-Onderbouw + K (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function publicationServiceApplicationControllerCourseApiControllerFilterRequest($course, $preview = false, $include_content = false, $content_as_html = false, $filter_type = null, $filter_typical_learning_time = null, $filter_learning_goal = null, $filter_working_process = null, $filter_learning_process = null, $filter_learning_level = null)
    {
        // verify the required parameter 'course' is set
        if ($course === null || (is_array($course) && count($course) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $course when calling publicationServiceApplicationControllerCourseApiControllerFilter'
            );
        }

        $resourcePath = '/api/v1/content/course/{course}/filter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($preview !== null) {
            $queryParams['preview'] = ObjectSerializer::toQueryValue($preview);
        }
        // query params
        if ($include_content !== null) {
            $queryParams['includeContent'] = ObjectSerializer::toQueryValue($include_content);
        }
        // query params
        if ($content_as_html !== null) {
            $queryParams['contentAsHtml'] = ObjectSerializer::toQueryValue($content_as_html);
        }
        // query params
        if (is_array($filter_type)) {
            $filter_type = ObjectSerializer::serializeCollection($filter_type, 'multi', true);
        }
        if ($filter_type !== null) {
            $queryParams['filter[type][]'] = ObjectSerializer::toQueryValue($filter_type);
        }
        // query params
        if (is_array($filter_typical_learning_time)) {
            $filter_typical_learning_time = ObjectSerializer::serializeCollection($filter_typical_learning_time, 'multi', true);
        }
        if ($filter_typical_learning_time !== null) {
            $queryParams['filter[typicalLearningTime][]'] = ObjectSerializer::toQueryValue($filter_typical_learning_time);
        }
        // query params
        if (is_array($filter_learning_goal)) {
            $filter_learning_goal = ObjectSerializer::serializeCollection($filter_learning_goal, 'multi', true);
        }
        if ($filter_learning_goal !== null) {
            $queryParams['filter[learningGoal][]'] = ObjectSerializer::toQueryValue($filter_learning_goal);
        }
        // query params
        if (is_array($filter_working_process)) {
            $filter_working_process = ObjectSerializer::serializeCollection($filter_working_process, 'multi', true);
        }
        if ($filter_working_process !== null) {
            $queryParams['filter[workingProcess][]'] = ObjectSerializer::toQueryValue($filter_working_process);
        }
        // query params
        if (is_array($filter_learning_process)) {
            $filter_learning_process = ObjectSerializer::serializeCollection($filter_learning_process, 'multi', true);
        }
        if ($filter_learning_process !== null) {
            $queryParams['filter[learningProcess][]'] = ObjectSerializer::toQueryValue($filter_learning_process);
        }
        // query params
        if (is_array($filter_learning_level)) {
            $filter_learning_level = ObjectSerializer::serializeCollection($filter_learning_level, 'multi', true);
        }
        if ($filter_learning_level !== null) {
            $queryParams['filter[learningLevel][]'] = ObjectSerializer::toQueryValue($filter_learning_level);
        }

        // path params
        if ($course !== null) {
            $resourcePath = str_replace(
                '{' . 'course' . '}',
                ObjectSerializer::toPathValue($course),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation publicationServiceApplicationControllerCourseApiControllerXml
     *
     * Get Edition XML of the newest publication in a stream.
     *
     * @param  string $course The StreamCode of the course to find the content in (see /api/v1/course) (required)
     * @param  bool $preview show preview version instead of the published version (optional, default to false)
     * @param  \DateTime $version find content before specified date/time (optional)
     *
     * @throws \Thip\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function publicationServiceApplicationControllerCourseApiControllerXml($course, $preview = false, $version = null)
    {
        list($response) = $this->publicationServiceApplicationControllerCourseApiControllerXmlWithHttpInfo($course, $preview, $version);
        return $response;
    }

    /**
     * Operation publicationServiceApplicationControllerCourseApiControllerXmlWithHttpInfo
     *
     * Get Edition XML of the newest publication in a stream.
     *
     * @param  string $course The StreamCode of the course to find the content in (see /api/v1/course) (required)
     * @param  bool $preview show preview version instead of the published version (optional, default to false)
     * @param  \DateTime $version find content before specified date/time (optional)
     *
     * @throws \Thip\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function publicationServiceApplicationControllerCourseApiControllerXmlWithHttpInfo($course, $preview = false, $version = null)
    {
        $request = $this->publicationServiceApplicationControllerCourseApiControllerXmlRequest($course, $preview, $version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation publicationServiceApplicationControllerCourseApiControllerXmlAsync
     *
     * Get Edition XML of the newest publication in a stream.
     *
     * @param  string $course The StreamCode of the course to find the content in (see /api/v1/course) (required)
     * @param  bool $preview show preview version instead of the published version (optional, default to false)
     * @param  \DateTime $version find content before specified date/time (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicationServiceApplicationControllerCourseApiControllerXmlAsync($course, $preview = false, $version = null)
    {
        return $this->publicationServiceApplicationControllerCourseApiControllerXmlAsyncWithHttpInfo($course, $preview, $version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation publicationServiceApplicationControllerCourseApiControllerXmlAsyncWithHttpInfo
     *
     * Get Edition XML of the newest publication in a stream.
     *
     * @param  string $course The StreamCode of the course to find the content in (see /api/v1/course) (required)
     * @param  bool $preview show preview version instead of the published version (optional, default to false)
     * @param  \DateTime $version find content before specified date/time (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicationServiceApplicationControllerCourseApiControllerXmlAsyncWithHttpInfo($course, $preview = false, $version = null)
    {
        $returnType = 'string';
        $request = $this->publicationServiceApplicationControllerCourseApiControllerXmlRequest($course, $preview, $version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'publicationServiceApplicationControllerCourseApiControllerXml'
     *
     * @param  string $course The StreamCode of the course to find the content in (see /api/v1/course) (required)
     * @param  bool $preview show preview version instead of the published version (optional, default to false)
     * @param  \DateTime $version find content before specified date/time (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function publicationServiceApplicationControllerCourseApiControllerXmlRequest($course, $preview = false, $version = null)
    {
        // verify the required parameter 'course' is set
        if ($course === null || (is_array($course) && count($course) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $course when calling publicationServiceApplicationControllerCourseApiControllerXml'
            );
        }

        $resourcePath = '/api/v1/content/course/{course}/xml';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($preview !== null) {
            $queryParams['preview'] = ObjectSerializer::toQueryValue($preview);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }

        // path params
        if ($course !== null) {
            $resourcePath = str_replace(
                '{' . 'course' . '}',
                ObjectSerializer::toPathValue($course),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
